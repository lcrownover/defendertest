<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="144126"><g><title>defendertest`DYLD-STUB$$memcmp (8,663 samples, 6.01%)</title><rect x="0.0118%" y="197" width="6.0107%" height="15" fill="rgb(227,0,7)" fg:x="17" fg:w="8663"/><text x="0.2618%" y="207.50">defender..</text></g><g><title>defendertest`&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="18.5088%" y="181" width="0.0139%" height="15" fill="rgb(217,0,24)" fg:x="26676" fg:w="20"/><text x="18.7588%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (15 samples, 0.01%)</title><rect x="18.5123%" y="165" width="0.0104%" height="15" fill="rgb(221,193,54)" fg:x="26681" fg:w="15"/><text x="18.7623%" y="175.50"></text></g><g><title>defendertest`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (34 samples, 0.02%)</title><rect x="18.5248%" y="181" width="0.0236%" height="15" fill="rgb(248,212,6)" fg:x="26699" fg:w="34"/><text x="18.7748%" y="191.50"></text></g><g><title>defendertest`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (29 samples, 0.02%)</title><rect x="18.5484%" y="181" width="0.0201%" height="15" fill="rgb(208,68,35)" fg:x="26733" fg:w="29"/><text x="18.7984%" y="191.50"></text></g><g><title>defendertest`DYLD-STUB$$memcmp (630 samples, 0.44%)</title><rect x="18.5713%" y="181" width="0.4371%" height="15" fill="rgb(232,128,0)" fg:x="26766" fg:w="630"/><text x="18.8213%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.02%)</title><rect x="19.0958%" y="53" width="0.0236%" height="15" fill="rgb(207,160,47)" fg:x="27522" fg:w="34"/><text x="19.3458%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.02%)</title><rect x="19.0979%" y="37" width="0.0215%" height="15" fill="rgb(228,23,34)" fg:x="27525" fg:w="31"/><text x="19.3479%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (55 samples, 0.04%)</title><rect x="19.0847%" y="69" width="0.0382%" height="15" fill="rgb(218,30,26)" fg:x="27506" fg:w="55"/><text x="19.3347%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (71 samples, 0.05%)</title><rect x="19.0764%" y="85" width="0.0493%" height="15" fill="rgb(220,122,19)" fg:x="27494" fg:w="71"/><text x="19.3264%" y="95.50"></text></g><g><title>defendertest`alloc::raw_vec::finish_grow (113 samples, 0.08%)</title><rect x="19.0521%" y="117" width="0.0784%" height="15" fill="rgb(250,228,42)" fg:x="27459" fg:w="113"/><text x="19.3021%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (95 samples, 0.07%)</title><rect x="19.0646%" y="101" width="0.0659%" height="15" fill="rgb(240,193,28)" fg:x="27477" fg:w="95"/><text x="19.3146%" y="111.50"></text></g><g><title>defendertest`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (149 samples, 0.10%)</title><rect x="19.0361%" y="133" width="0.1034%" height="15" fill="rgb(216,20,37)" fg:x="27436" fg:w="149"/><text x="19.2861%" y="143.50"></text></g><g><title>defendertest`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (159 samples, 0.11%)</title><rect x="19.0320%" y="149" width="0.1103%" height="15" fill="rgb(206,188,39)" fg:x="27430" fg:w="159"/><text x="19.2820%" y="159.50"></text></g><g><title>defendertest`alloc::fmt::format::format_inner (213 samples, 0.15%)</title><rect x="19.0118%" y="181" width="0.1478%" height="15" fill="rgb(217,207,13)" fg:x="27401" fg:w="213"/><text x="19.2618%" y="191.50"></text></g><g><title>defendertest`core::fmt::write (192 samples, 0.13%)</title><rect x="19.0264%" y="165" width="0.1332%" height="15" fill="rgb(231,73,38)" fg:x="27422" fg:w="192"/><text x="19.2764%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.01%)</title><rect x="19.1492%" y="149" width="0.0104%" height="15" fill="rgb(225,20,46)" fg:x="27599" fg:w="15"/><text x="19.3992%" y="159.50"></text></g><g><title>defendertest`core::slice::sort::merge_sort (11,779 samples, 8.17%)</title><rect x="19.1700%" y="181" width="8.1727%" height="15" fill="rgb(210,31,41)" fg:x="27629" fg:w="11779"/><text x="19.4200%" y="191.50">defendertes..</text></g><g><title>defendertest`getrandom::imp::getrandom_inner (15 samples, 0.01%)</title><rect x="27.3427%" y="181" width="0.0104%" height="15" fill="rgb(221,200,47)" fg:x="39408" fg:w="15"/><text x="27.5927%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (43,246 samples, 30.01%)</title><rect x="27.3906%" y="149" width="30.0057%" height="15" fill="rgb(226,26,5)" fg:x="39477" fg:w="43246"/><text x="27.6406%" y="159.50">libsystem_kernel.dylib`__open</text></g><g><title>defendertest`std::sys::unix::fs::File::open_c (43,284 samples, 30.03%)</title><rect x="27.3754%" y="165" width="30.0321%" height="15" fill="rgb(249,33,26)" fg:x="39455" fg:w="43284"/><text x="27.6254%" y="175.50">defendertest`std::sys::unix::fs::File::open_c</text></g><g><title>libsystem_kernel.dylib`open (16 samples, 0.01%)</title><rect x="57.3963%" y="149" width="0.0111%" height="15" fill="rgb(235,183,28)" fg:x="82723" fg:w="16"/><text x="57.6463%" y="159.50"></text></g><g><title>defendertest`std::fs::OpenOptions::_open (43,317 samples, 30.05%)</title><rect x="27.3531%" y="181" width="30.0550%" height="15" fill="rgb(221,5,38)" fg:x="39423" fg:w="43317"/><text x="27.6031%" y="191.50">defendertest`std::fs::OpenOptions::_open</text></g><g><title>defendertest`std::io::Write::write_all (11,156 samples, 7.74%)</title><rect x="57.4081%" y="181" width="7.7404%" height="15" fill="rgb(247,18,42)" fg:x="82740" fg:w="11156"/><text x="57.6581%" y="191.50">defendertes..</text></g><g><title>libsystem_kernel.dylib`write (11,140 samples, 7.73%)</title><rect x="57.4192%" y="165" width="7.7293%" height="15" fill="rgb(241,131,45)" fg:x="82756" fg:w="11140"/><text x="57.6692%" y="175.50">libsystem_k..</text></g><g><title>defendertest`core::ffi::c_str::CStr::from_bytes_with_nul (15 samples, 0.01%)</title><rect x="65.1576%" y="165" width="0.0104%" height="15" fill="rgb(249,31,29)" fg:x="93909" fg:w="15"/><text x="65.4076%" y="175.50"></text></g><g><title>defendertest`std::sys::unix::fs::stat (26 samples, 0.02%)</title><rect x="65.1520%" y="181" width="0.0180%" height="15" fill="rgb(225,111,53)" fg:x="93901" fg:w="26"/><text x="65.4020%" y="191.50"></text></g><g><title>defendertest`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.02%)</title><rect x="65.1708%" y="149" width="0.0222%" height="15" fill="rgb(238,160,17)" fg:x="93928" fg:w="32"/><text x="65.4208%" y="159.50"></text></g><g><title>defendertest`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (38 samples, 0.03%)</title><rect x="65.1701%" y="165" width="0.0264%" height="15" fill="rgb(214,148,48)" fg:x="93927" fg:w="38"/><text x="65.4201%" y="175.50"></text></g><g><title>defendertest`uuid::fmt::_&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (48 samples, 0.03%)</title><rect x="65.1701%" y="181" width="0.0333%" height="15" fill="rgb(232,36,49)" fg:x="93927" fg:w="48"/><text x="65.4201%" y="191.50"></text></g><g><title>defendertest`uuid::v4::_&lt;impl uuid::Uuid&gt;::new_v4 (920 samples, 0.64%)</title><rect x="65.2089%" y="181" width="0.6383%" height="15" fill="rgb(209,103,24)" fg:x="93983" fg:w="920"/><text x="65.4589%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (913 samples, 0.63%)</title><rect x="65.2138%" y="165" width="0.6335%" height="15" fill="rgb(229,88,8)" fg:x="93990" fg:w="913"/><text x="65.4638%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`stat (7,669 samples, 5.32%)</title><rect x="65.8521%" y="181" width="5.3210%" height="15" fill="rgb(213,181,19)" fg:x="94910" fg:w="7669"/><text x="66.1021%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.03%)</title><rect x="71.1766%" y="181" width="0.0298%" height="15" fill="rgb(254,191,54)" fg:x="102584" fg:w="43"/><text x="71.4266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (17 samples, 0.01%)</title><rect x="71.2169%" y="181" width="0.0118%" height="15" fill="rgb(241,83,37)" fg:x="102642" fg:w="17"/><text x="71.4669%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.01%)</title><rect x="71.2169%" y="165" width="0.0118%" height="15" fill="rgb(233,36,39)" fg:x="102642" fg:w="17"/><text x="71.4669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.03%)</title><rect x="71.2286%" y="181" width="0.0257%" height="15" fill="rgb(226,3,54)" fg:x="102659" fg:w="37"/><text x="71.4786%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.02%)</title><rect x="71.2377%" y="165" width="0.0167%" height="15" fill="rgb(245,192,40)" fg:x="102672" fg:w="24"/><text x="71.4877%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (15 samples, 0.01%)</title><rect x="71.2647%" y="181" width="0.0104%" height="15" fill="rgb(238,167,29)" fg:x="102711" fg:w="15"/><text x="71.5147%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8,188 samples, 5.68%)</title><rect x="71.2751%" y="181" width="5.6811%" height="15" fill="rgb(232,182,51)" fg:x="102726" fg:w="8188"/><text x="71.5251%" y="191.50">libsyst..</text></g><g><title>defendertest`defendertest::main (102,246 samples, 70.94%)</title><rect x="6.0274%" y="197" width="70.9421%" height="15" fill="rgb(231,60,39)" fg:x="8687" fg:w="102246"/><text x="6.2774%" y="207.50">defendertest`defendertest::main</text></g><g><title>libsystem_kernel.dylib`close (10,515 samples, 7.30%)</title><rect x="76.9847%" y="197" width="7.2957%" height="15" fill="rgb(208,69,12)" fg:x="110955" fg:w="10515"/><text x="77.2347%" y="207.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 0.03%)</title><rect x="84.2804%" y="197" width="0.0271%" height="15" fill="rgb(235,93,37)" fg:x="121470" fg:w="39"/><text x="84.5304%" y="207.50"></text></g><g><title>dyld`start (144,122 samples, 100.00%)</title><rect x="0.0007%" y="277" width="99.9972%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="144122"/><text x="0.2507%" y="287.50">dyld`start</text></g><g><title>defendertest`main (144,122 samples, 100.00%)</title><rect x="0.0007%" y="261" width="99.9972%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="144122"/><text x="0.2507%" y="271.50">defendertest`main</text></g><g><title>defendertest`std::rt::lang_start_internal (144,122 samples, 100.00%)</title><rect x="0.0007%" y="245" width="99.9972%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="144122"/><text x="0.2507%" y="255.50">defendertest`std::rt::lang_start_internal</text></g><g><title>defendertest`std::rt::lang_start::_{{closure}} (144,122 samples, 100.00%)</title><rect x="0.0007%" y="229" width="99.9972%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="144122"/><text x="0.2507%" y="239.50">defendertest`std::rt::lang_start::_{{closure}}</text></g><g><title>defendertest`std::sys_common::backtrace::__rust_begin_short_backtrace (144,122 samples, 100.00%)</title><rect x="0.0007%" y="213" width="99.9972%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="144122"/><text x="0.2507%" y="223.50">defendertest`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (22,589 samples, 15.67%)</title><rect x="84.3248%" y="197" width="15.6731%" height="15" fill="rgb(239,60,40)" fg:x="121534" fg:w="22589"/><text x="84.5748%" y="207.50">libsystem_platform.dylib..</text></g><g><title>all (144,126 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="144126"/><text x="0.2500%" y="303.50"></text></g></svg></svg>